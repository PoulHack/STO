//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(STO.ORM.STODbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetscbad482ad6c45bd3d16d4f80ee0e6eb9f1165e7447e9419fbf7ab22218e4ab09))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetscbad482ad6c45bd3d16d4f80ee0e6eb9f1165e7447e9419fbf7ab22218e4ab09 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "cbad482ad6c45bd3d16d4f80ee0e6eb9f1165e7447e9419fbf7ab22218e4ab09"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Account")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Customer")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Order")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Service")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.Material")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.ServiceList")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.ServiceListService")
            {
                return GetView6();
            }

            if (extentName == "STODbContext.Accounts")
            {
                return GetView7();
            }

            if (extentName == "STODbContext.Account_customer")
            {
                return GetView8();
            }

            if (extentName == "STODbContext.Customers")
            {
                return GetView9();
            }

            if (extentName == "STODbContext.Orders")
            {
                return GetView10();
            }

            if (extentName == "STODbContext.Account_orders")
            {
                return GetView11();
            }

            if (extentName == "STODbContext.Services")
            {
                return GetView12();
            }

            if (extentName == "STODbContext.Service_material")
            {
                return GetView13();
            }

            if (extentName == "STODbContext.Order_services")
            {
                return GetView14();
            }

            if (extentName == "STODbContext.ServiceList_services")
            {
                return GetView15();
            }

            if (extentName == "STODbContext.Materials")
            {
                return GetView16();
            }

            if (extentName == "STODbContext.ServiceLists")
            {
                return GetView17();
            }

            if (extentName == "STODbContext.ServiceList_Services")
            {
                return GetView18();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Account.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Account
        [CodeFirstDatabaseSchema.Account](T1.Account_ID, T1.[Account.customer_ID])
    FROM (
        SELECT 
            Key(T.Account_customer_Source).ID AS Account_ID, 
            Key(T.Account_customer_Target).ID AS [Account.customer_ID], 
            True AS _from0
        FROM STODbContext.Account_customer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Customer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customer
        [CodeFirstDatabaseSchema.Customer](T1.Customer_ID, T1.Customer_Name, T1.Customer_Address, T1.Customer_Phone)
    FROM (
        SELECT 
            T.ID AS Customer_ID, 
            T.Name AS Customer_Name, 
            T.Address AS Customer_Address, 
            T.Phone AS Customer_Phone, 
            True AS _from0
        FROM STODbContext.Customers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Order.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Order
        [CodeFirstDatabaseSchema.Order](T3.Order_ID, T3.Order_coast, T3.Order_isReady, T3.[Order.Account_ID])
    FROM (
        SELECT T1.Order_ID, T2.Order_coast, T2.Order_isReady, T1.[Order.Account_ID], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Account_orders_Target).ID AS Order_ID, 
                Key(T.Account_orders_Source).ID AS [Order.Account_ID], 
                True AS _from1
            FROM STODbContext.Account_orders AS T) AS T1
            INNER JOIN (
            SELECT 
                T.ID AS Order_ID, 
                T.coast AS Order_coast, 
                T.isReady AS Order_isReady, 
                True AS _from0
            FROM STODbContext.Orders AS T) AS T2
            ON T1.Order_ID = T2.Order_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Service.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Service
        [CodeFirstDatabaseSchema.Service](T6.Service_ID, T6.Service_price, T6.Service_name, T6.Service_description, T6.Service_imageURL, T6.Service_hidden, T6.Service_materialAmount, T6.[Service.material_ID], T6.[Service.Order_ID], T6.[Service.ServiceList_ID])
    FROM (
        SELECT T4.Service_ID, T4.Service_price, T4.Service_name, T4.Service_description, T4.Service_imageURL, T4.Service_hidden, T4.Service_materialAmount, T4.[Service.material_ID], T4.[Service.Order_ID], T5.[Service.ServiceList_ID], T4._from0, (T5._from1 AND T5._from1 IS NOT NULL) AS _from1, T4._from2, T4._from3
        FROM  (
            SELECT T1.Service_ID, T3.Service_price, T3.Service_name, T3.Service_description, T3.Service_imageURL, T3.Service_hidden, T3.Service_materialAmount, T2.[Service.material_ID], T1.[Service.Order_ID], T3._from0, T2._from2, T1._from3
            FROM  (
                SELECT 
                    Key(T.Order_services_Target).ID AS Service_ID, 
                    Key(T.Order_services_Source).ID AS [Service.Order_ID], 
                    True AS _from3
                FROM STODbContext.Order_services AS T) AS T1
                INNER JOIN (
                SELECT 
                    Key(T.Service_material_Source).ID AS Service_ID, 
                    Key(T.Service_material_Target).ID AS [Service.material_ID], 
                    True AS _from2
                FROM STODbContext.Service_material AS T) AS T2
                ON T1.Service_ID = T2.Service_ID
                INNER JOIN (
                SELECT 
                    T.ID AS Service_ID, 
                    T.price AS Service_price, 
                    T.name AS Service_name, 
                    T.description AS Service_description, 
                    T.imageURL AS Service_imageURL, 
                    T.hidden AS Service_hidden, 
                    T.materialAmount AS Service_materialAmount, 
                    True AS _from0
                FROM STODbContext.Services AS T) AS T3
                ON T1.Service_ID = T3.Service_ID) AS T4
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ServiceList_services_Target).ID AS Service_ID, 
                Key(T.ServiceList_services_Source).ID AS [Service.ServiceList_ID], 
                True AS _from1
            FROM STODbContext.ServiceList_services AS T) AS T5
            ON T4.Service_ID = T5.Service_ID
    ) AS T6");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Material.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Material
        [CodeFirstDatabaseSchema.Material](T1.Material_ID, T1.Material_name)
    FROM (
        SELECT 
            T.ID AS Material_ID, 
            T.name AS Material_name, 
            True AS _from0
        FROM STODbContext.Materials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ServiceList.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceList
        [CodeFirstDatabaseSchema.ServiceList](T1.ServiceList_ID)
    FROM (
        SELECT 
            T.ID AS ServiceList_ID, 
            True AS _from0
        FROM STODbContext.ServiceLists AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ServiceListService.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceListService
        [CodeFirstDatabaseSchema.ServiceListService](T1.[ServiceListService.ServiceList_ID], T1.[ServiceListService.Service_ID])
    FROM (
        SELECT 
            Key(T.ServiceList_Services_Source).ID AS [ServiceListService.ServiceList_ID], 
            Key(T.ServiceList_Services_Target).ID AS [ServiceListService.Service_ID], 
            True AS _from0
        FROM STODbContext.ServiceList_Services AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.Accounts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Accounts
        [STO.ORM.Account](T1.Account_ID) WITH 
        RELATIONSHIP(CREATEREF(STODbContext.Customers, ROW(T1.[Account_customer.Account_customer_Target.ID]),[STO.ORM.Customer]),[STO.ORM.Account_customer],Account_customer_Source,Account_customer_Target) 
    FROM (
        SELECT 
            T.ID AS Account_ID, 
            True AS _from0, 
            T.customer_ID AS [Account_customer.Account_customer_Target.ID]
        FROM CodeFirstDatabase.Account AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.Account_customer.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Account_customer
        [STO.ORM.Account_customer](T3.[Account_customer.Account_customer_Source], T3.[Account_customer.Account_customer_Target])
    FROM (
        SELECT -- Constructing Account_customer_Source
            CreateRef(STODbContext.Accounts, row(T2.[Account_customer.Account_customer_Source.ID]), [STO.ORM.Account]) AS [Account_customer.Account_customer_Source], 
            T2.[Account_customer.Account_customer_Target]
        FROM (
            SELECT -- Constructing Account_customer_Target
                T1.[Account_customer.Account_customer_Source.ID], 
                CreateRef(STODbContext.Customers, row(T1.[Account_customer.Account_customer_Target.ID]), [STO.ORM.Customer]) AS [Account_customer.Account_customer_Target]
            FROM (
                SELECT 
                    T.ID AS [Account_customer.Account_customer_Source.ID], 
                    T.customer_ID AS [Account_customer.Account_customer_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Account AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for STODbContext.Customers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Customers
        [STO.ORM.Customer](T1.Customer_ID, T1.Customer_Name, T1.Customer_Address, T1.Customer_Phone)
    FROM (
        SELECT 
            T.ID AS Customer_ID, 
            T.Name AS Customer_Name, 
            T.Address AS Customer_Address, 
            T.Phone AS Customer_Phone, 
            True AS _from0
        FROM CodeFirstDatabase.Customer AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [STO.ORM.Order](T1.Order_ID, T1.Order_coast, T1.Order_isReady) WITH 
        RELATIONSHIP(CREATEREF(STODbContext.Accounts, ROW(T1.[Account_orders.Account_orders_Source.ID]),[STO.ORM.Account]),[STO.ORM.Account_orders],Account_orders_Target,Account_orders_Source) 
    FROM (
        SELECT 
            T.ID AS Order_ID, 
            T.coast AS Order_coast, 
            T.isReady AS Order_isReady, 
            True AS _from0, 
            T.Account_ID AS [Account_orders.Account_orders_Source.ID]
        FROM CodeFirstDatabase.[Order] AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.Account_orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Account_orders
        [STO.ORM.Account_orders](T3.[Account_orders.Account_orders_Source], T3.[Account_orders.Account_orders_Target])
    FROM (
        SELECT -- Constructing Account_orders_Source
            CreateRef(STODbContext.Accounts, row(T2.[Account_orders.Account_orders_Source.ID]), [STO.ORM.Account]) AS [Account_orders.Account_orders_Source], 
            T2.[Account_orders.Account_orders_Target]
        FROM (
            SELECT -- Constructing Account_orders_Target
                T1.[Account_orders.Account_orders_Source.ID], 
                CreateRef(STODbContext.Orders, row(T1.[Account_orders.Account_orders_Target.ID]), [STO.ORM.Order]) AS [Account_orders.Account_orders_Target]
            FROM (
                SELECT 
                    T.Account_ID AS [Account_orders.Account_orders_Source.ID], 
                    T.ID AS [Account_orders.Account_orders_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.[Order] AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for STODbContext.Services.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Services
        [STO.ORM.Service](T1.Service_ID, T1.Service_price, T1.Service_name, T1.Service_description, T1.Service_imageURL, T1.Service_hidden, T1.Service_materialAmount) WITH 
        RELATIONSHIP(CREATEREF(STODbContext.Materials, ROW(T1.[Service_material.Service_material_Target.ID]),[STO.ORM.Material]),[STO.ORM.Service_material],Service_material_Source,Service_material_Target) 
        RELATIONSHIP(CREATEREF(STODbContext.Orders, ROW(T1.[Order_services.Order_services_Source.ID]),[STO.ORM.Order]),[STO.ORM.Order_services],Order_services_Target,Order_services_Source) 
        RELATIONSHIP(CREATEREF(STODbContext.ServiceLists, ROW(T1.[ServiceList_services.ServiceList_services_Source.ID]),[STO.ORM.ServiceList]),[STO.ORM.ServiceList_services],ServiceList_services_Target,ServiceList_services_Source) 
    FROM (
        SELECT 
            T.ID AS Service_ID, 
            T.price AS Service_price, 
            T.name AS Service_name, 
            T.description AS Service_description, 
            T.imageURL AS Service_imageURL, 
            T.hidden AS Service_hidden, 
            T.materialAmount AS Service_materialAmount, 
            True AS _from0, 
            T.material_ID AS [Service_material.Service_material_Target.ID], 
            T.Order_ID AS [Order_services.Order_services_Source.ID], 
            T.ServiceList_ID AS [ServiceList_services.ServiceList_services_Source.ID]
        FROM CodeFirstDatabase.Service AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.Service_material.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Service_material
        [STO.ORM.Service_material](T3.[Service_material.Service_material_Source], T3.[Service_material.Service_material_Target])
    FROM (
        SELECT -- Constructing Service_material_Source
            CreateRef(STODbContext.Services, row(T2.[Service_material.Service_material_Source.ID]), [STO.ORM.Service]) AS [Service_material.Service_material_Source], 
            T2.[Service_material.Service_material_Target]
        FROM (
            SELECT -- Constructing Service_material_Target
                T1.[Service_material.Service_material_Source.ID], 
                CreateRef(STODbContext.Materials, row(T1.[Service_material.Service_material_Target.ID]), [STO.ORM.Material]) AS [Service_material.Service_material_Target]
            FROM (
                SELECT 
                    T.ID AS [Service_material.Service_material_Source.ID], 
                    T.material_ID AS [Service_material.Service_material_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Service AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for STODbContext.Order_services.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Order_services
        [STO.ORM.Order_services](T3.[Order_services.Order_services_Source], T3.[Order_services.Order_services_Target])
    FROM (
        SELECT -- Constructing Order_services_Source
            CreateRef(STODbContext.Orders, row(T2.[Order_services.Order_services_Source.ID]), [STO.ORM.Order]) AS [Order_services.Order_services_Source], 
            T2.[Order_services.Order_services_Target]
        FROM (
            SELECT -- Constructing Order_services_Target
                T1.[Order_services.Order_services_Source.ID], 
                CreateRef(STODbContext.Services, row(T1.[Order_services.Order_services_Target.ID]), [STO.ORM.Service]) AS [Order_services.Order_services_Target]
            FROM (
                SELECT 
                    T.Order_ID AS [Order_services.Order_services_Source.ID], 
                    T.ID AS [Order_services.Order_services_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Service AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for STODbContext.ServiceList_services.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceList_services
        [STO.ORM.ServiceList_services](T3.[ServiceList_services.ServiceList_services_Source], T3.[ServiceList_services.ServiceList_services_Target])
    FROM (
        SELECT -- Constructing ServiceList_services_Source
            CreateRef(STODbContext.ServiceLists, row(T2.[ServiceList_services.ServiceList_services_Source.ID]), [STO.ORM.ServiceList]) AS [ServiceList_services.ServiceList_services_Source], 
            T2.[ServiceList_services.ServiceList_services_Target]
        FROM (
            SELECT -- Constructing ServiceList_services_Target
                T1.[ServiceList_services.ServiceList_services_Source.ID], 
                CreateRef(STODbContext.Services, row(T1.[ServiceList_services.ServiceList_services_Target.ID]), [STO.ORM.Service]) AS [ServiceList_services.ServiceList_services_Target]
            FROM (
                SELECT 
                    T.ServiceList_ID AS [ServiceList_services.ServiceList_services_Source.ID], 
                    T.ID AS [ServiceList_services.ServiceList_services_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Service AS T
                WHERE T.ServiceList_ID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for STODbContext.Materials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Materials
        [STO.ORM.Material](T1.Material_ID, T1.Material_name)
    FROM (
        SELECT 
            T.ID AS Material_ID, 
            T.name AS Material_name, 
            True AS _from0
        FROM CodeFirstDatabase.Material AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.ServiceLists.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceLists
        [STO.ORM.ServiceList](T1.ServiceList_ID)
    FROM (
        SELECT 
            T.ID AS ServiceList_ID, 
            True AS _from0
        FROM CodeFirstDatabase.ServiceList AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for STODbContext.ServiceList_Services.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ServiceList_Services
        [STO.ORM.ServiceList_Services](T3.[ServiceList_Services.ServiceList_Services_Source], T3.[ServiceList_Services.ServiceList_Services_Target])
    FROM (
        SELECT -- Constructing ServiceList_Services_Source
            CreateRef(STODbContext.ServiceLists, row(T2.[ServiceList_Services.ServiceList_Services_Source.ID]), [STO.ORM.ServiceList]) AS [ServiceList_Services.ServiceList_Services_Source], 
            T2.[ServiceList_Services.ServiceList_Services_Target]
        FROM (
            SELECT -- Constructing ServiceList_Services_Target
                T1.[ServiceList_Services.ServiceList_Services_Source.ID], 
                CreateRef(STODbContext.Services, row(T1.[ServiceList_Services.ServiceList_Services_Target.ID]), [STO.ORM.Service]) AS [ServiceList_Services.ServiceList_Services_Target]
            FROM (
                SELECT 
                    T.ServiceList_ID AS [ServiceList_Services.ServiceList_Services_Source.ID], 
                    T.Service_ID AS [ServiceList_Services.ServiceList_Services_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ServiceListService AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
